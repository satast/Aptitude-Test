{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SATHISH\\\\Desktop\\\\myfirst\\\\src\\\\components\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport Question from './';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  score: {\n    type: Number,\n    default: 0\n  } // New field to store the user's score\n});\nconst User = mongoose.model('User', userSchema);\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Function to create a new user\nconst createUser = async (username, password) => {\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n  const user = new User({\n    username,\n    password: hashedPassword\n  });\n  await user.save();\n  console.log(`User ${username} created`);\n};\n\n// Function to validate answers and calculate score\nconst calculateScore = (answers, questions) => {\n  let score = 0;\n  questions.forEach((q, index) => {\n    if (answers[index] === q.correctAnswer) {\n      score++;\n    }\n  });\n  return score;\n};\nconst Test = () => {\n  _s();\n  const [answers, setAnswers] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  const questions = [/* Your questions array here */];\n  const handleAnswer = (questionIndex, answer) => {\n    setAnswers({\n      ...answers,\n      [questionIndex]: answer\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const score = calculateScore(Object.values(answers), questions);\n\n    // Assuming the user is logged in and you have their username\n    const username = 'username'; // Replace with actual username\n\n    // Update the user's score in the database\n    await User.findOneAndUpdate({\n      username\n    }, {\n      $set: {\n        score\n      }\n    });\n    setSubmitted(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions.map((q, index) => /*#__PURE__*/_jsxDEV(Question, {\n        question: q.question,\n        options: q.options,\n        onAnswer: answer => handleAnswer(index, answer)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-3\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), submitted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"You've completed the test successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Test, \"O/nYjJkSnbJ3pHgVyFGmBZJX18s=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","mongoose","bcrypt","Question","jsxDEV","_jsxDEV","userSchema","Schema","username","type","String","required","unique","password","score","Number","default","User","model","connect","useNewUrlParser","useUnifiedTopology","createUser","salt","genSalt","hashedPassword","hash","user","save","console","log","calculateScore","answers","questions","forEach","q","index","correctAnswer","Test","_s","setAnswers","submitted","setSubmitted","handleAnswer","questionIndex","answer","handleSubmit","e","preventDefault","Object","values","findOneAndUpdate","$set","className","children","onSubmit","map","question","options","onAnswer","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SATHISH/Desktop/myfirst/src/components/Test.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\nimport Question from './'\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  score: { type: Number, default: 0 } // New field to store the user's score\r\n});\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// Function to create a new user\r\nconst createUser = async (username, password) => {\r\n  const salt = await bcrypt.genSalt(10);\r\n  const hashedPassword = await bcrypt.hash(password, salt);\r\n  const user = new User({ username, password: hashedPassword });\r\n  await user.save();\r\n  console.log(`User ${username} created`);\r\n};\r\n\r\n// Function to validate answers and calculate score\r\nconst calculateScore = (answers, questions) => {\r\n  let score = 0;\r\n  questions.forEach((q, index) => {\r\n    if (answers[index] === q.correctAnswer) {\r\n      score++;\r\n    }\r\n  });\r\n  return score;\r\n};\r\n\r\nconst Test = () => {\r\n  const [answers, setAnswers] = useState({});\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const questions = [ /* Your questions array here */ ];\r\n\r\n  const handleAnswer = (questionIndex, answer) => {\r\n    setAnswers({\r\n      ...answers,\r\n      [questionIndex]: answer\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const score = calculateScore(Object.values(answers), questions);\r\n\r\n    // Assuming the user is logged in and you have their username\r\n    const username = 'username'; // Replace with actual username\r\n\r\n    // Update the user's score in the database\r\n    await User.findOneAndUpdate({ username }, { $set: { score } });\r\n\r\n    setSubmitted(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <form onSubmit={handleSubmit}>\r\n        {questions.map((q, index) => (\r\n          <Question\r\n            key={index}\r\n            question={q.question}\r\n            options={q.options}\r\n            onAnswer={(answer) => handleAnswer(index, answer)}\r\n          />\r\n        ))}\r\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">Submit</button>\r\n      </form>\r\n      {submitted && (\r\n        <div className=\"alert alert-success mt-4\">\r\n          <strong>You've completed the test successfully!</strong>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}