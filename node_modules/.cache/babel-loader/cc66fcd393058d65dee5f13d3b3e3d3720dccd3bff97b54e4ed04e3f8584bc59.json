{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst TestResult = require('./models/TestResult');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst User = require('./models/User');\nconst app = express();\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/testdb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB Connected')).catch(err => console.log(err));\n\n// Middleware to protect routes\nconst protect = async (req, res, next) => {\n  let token;\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\n    try {\n      token = req.headers.authorization.split(' ')[1];\n      const decoded = jwt.verify(token, 'your_jwt_secret');\n      req.user = await User.findById(decoded.id).select('-password');\n      next();\n    } catch (error) {\n      console.error(error);\n      res.status(401).json({\n        message: 'Not authorized, token failed'\n      });\n    }\n  }\n  if (!token) {\n    res.status(401).json({\n      message: 'Not authorized, no token'\n    });\n  }\n};\n\n// Route to submit test results\napp.post('/api/submit-test', protect, async (req, res) => {\n  const {\n    user,\n    answers\n  } = req.body;\n  try {\n    const testResult = new TestResult({\n      user: user.username,\n      // Adjust as per your User model structure\n      answers\n    });\n    await testResult.save();\n    res.status(201).json({\n      message: 'Test result submitted successfully'\n    });\n  } catch (error) {\n    console.error('Error submitting test result', error);\n    res.status(500).json({\n      message: 'Server Error'\n    });\n  }\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","mongoose","TestResult","jwt","bcrypt","User","app","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","protect","req","res","next","token","headers","authorization","startsWith","split","decoded","verify","user","findById","id","select","error","status","message","post","answers","body","testResult","username","save","PORT","process","env","listen"],"sources":["C:/Users/SATHISH/Desktop/myfirst/src/components/Test.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst TestResult = require('./models/TestResult');\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcryptjs');\r\nconst User = require('./models/User');\r\n\r\nconst app = express();\r\napp.use(express.json());\r\n\r\n// Connect to MongoDB\r\nmongoose.connect('mongodb://localhost:27017/testdb', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n.then(() => console.log('MongoDB Connected'))\r\n.catch(err => console.log(err));\r\n\r\n// Middleware to protect routes\r\nconst protect = async (req, res, next) => {\r\n  let token;\r\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n    try {\r\n      token = req.headers.authorization.split(' ')[1];\r\n      const decoded = jwt.verify(token, 'your_jwt_secret');\r\n      req.user = await User.findById(decoded.id).select('-password');\r\n      next();\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(401).json({ message: 'Not authorized, token failed' });\r\n    }\r\n  }\r\n  if (!token) {\r\n    res.status(401).json({ message: 'Not authorized, no token' });\r\n  }\r\n};\r\n\r\n// Route to submit test results\r\napp.post('/api/submit-test', protect, async (req, res) => {\r\n  const { user, answers } = req.body;\r\n\r\n  try {\r\n    const testResult = new TestResult({\r\n      user: user.username, // Adjust as per your User model structure\r\n      answers\r\n    });\r\n    await testResult.save();\r\n    res.status(201).json({ message: 'Test result submitted successfully' });\r\n  } catch (error) {\r\n    console.error('Error submitting test result', error);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}